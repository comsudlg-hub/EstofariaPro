import 'package:flutter/material.dart';
import '../../services/firebase_auth_service.dart';
import '../../theme/colors.dart';
import '../../theme/typography.dart';

class RegisterScreen extends StatefulWidget {
  @override
  _RegisterScreenState createState() => _RegisterScreenState();
}

class _RegisterScreenState extends State<RegisterScreen> {
  final _formKey = GlobalKey<FormState>();
  final FirebaseAuthService _authService = FirebaseAuthService();

  // Controllers comuns
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  final _phoneController = TextEditingController();
  final _addressController = TextEditingController();

  // Pessoa física
  final _nameController = TextEditingController();

  // Pessoa jurídica
  final _companyNameController = TextEditingController();
  final _cnpjController = TextEditingController();
  final _responsibleController = TextEditingController();

  String _accountType = "fisica"; // física ou juridica
  String _companyRole = "estofaria"; // estofaria ou fornecedor
  bool _loading = false;

  void _register() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => _loading = true);

    String? result = await _authService.register(
      _emailController.text.trim(),
      _passwordController.text.trim(),
    );

    setState(() => _loading = false);

    if (result == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("Conta criada com sucesso!")),
      );
      Navigator.pop(context);
    } else {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(result)));
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.backgroundLight,
      body: SingleChildScrollView(
        padding: EdgeInsets.all(24),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              SizedBox(height: 40),
              Icon(Icons.weekend, size: 80, color: AppColors.primary),
              SizedBox(height: 12),
              Text("EstofariaPro",
                  style: AppTypography.title.copyWith(color: AppColors.primary)),
              Text("A medida certa para tapeçar sua empresa",
                  style: AppTypography.subtitle.copyWith(color: Color(0xFF42585C))),
              SizedBox(height: 32),

              // Tipo de conta
              Row(
                children: [
                  Expanded(
                    child: RadioListTile<String>(
                      value: "fisica",
                      groupValue: _accountType,
                      onChanged: (val) => setState(() => _accountType = val!),
                      title: Text("Pessoa Física"),
                    ),
                  ),
                  Expanded(
                    child: RadioListTile<String>(
                      value: "juridica",
                      groupValue: _accountType,
                      onChanged: (val) => setState(() => _accountType = val!),
                      title: Text("Pessoa Jurídica"),
                    ),
                  ),
                ],
              ),
              SizedBox(height: 20),

              if (_accountType == "fisica") ...[
                TextFormField(
                  controller: _nameController,
                  decoration: InputDecoration(
                    labelText: "Nome completo",
                    prefixIcon: Icon(Icons.person),
                  ),
                  validator: (v) =>
                      v == null || v.isEmpty ? "Informe seu nome" : null,
                ),
                SizedBox(height: 16),
                TextFormField(
                  controller: _phoneController,
                  keyboardType: TextInputType.phone,
                  decoration: InputDecoration(
                    labelText: "Telefone de contato",
                    prefixIcon: Icon(Icons.phone),
                  ),
                  validator: (v) =>
                      v == null || v.isEmpty ? "Informe seu telefone" : null,
                ),
              ] else ...[
                TextFormField(
                  controller: _companyNameController,
                  decoration: InputDecoration(
                    labelText: "Nome da empresa",
                    prefixIcon: Icon(Icons.business),
                  ),
                  validator: (v) =>
                      v == null || v.isEmpty ? "Informe o nome da empresa" : null,
                ),
                SizedBox(height: 16),
                TextFormField(
                  controller: _cnpjController,
                  decoration: InputDecoration(
                    labelText: "CNPJ",
                    prefixIcon: Icon(Icons.confirmation_number),
                  ),
                  validator: (v) =>
                      v == null || v.isEmpty ? "Informe o CNPJ" : null,
                ),
                SizedBox(height: 16),
                TextFormField(
                  controller: _responsibleController,
                  decoration: InputDecoration(
                    labelText: "Responsável",
                    prefixIcon: Icon(Icons.person),
                  ),
                  validator: (v) =>
                      v == null || v.isEmpty ? "Informe o responsável" : null,
                ),
                SizedBox(height: 16),
                Row(
                  children: [
                    Expanded(
                      child: RadioListTile<String>(
                        value: "estofaria",
                        groupValue: _companyRole,
                        onChanged: (val) => setState(() => _companyRole = val!),
                        title: Text("Estofaria"),
                      ),
                    ),
                    Expanded(
                      child: RadioListTile<String>(
                        value: "fornecedor",
                        groupValue: _companyRole,
                        onChanged: (val) => setState(() => _companyRole = val!),
                        title: Text("Fornecedor"),
                      ),
                    ),
                  ],
                ),
              ],
              SizedBox(height: 16),

              // Campos comuns
              TextFormField(
                controller: _emailController,
                decoration: InputDecoration(
                  labelText: "Email",
                  prefixIcon: Icon(Icons.email),
                ),
                validator: (v) =>
                    v == null || v.isEmpty ? "Informe seu email" : null,
              ),
              SizedBox(height: 16),
                            // Endereço separado (preparado para OAPS/Autocomplete)
              // Campos: Rua, Número, Bairro, Cidade, CEP
              TextFormField(
                controller: _streetController,
                decoration: InputDecoration(
                  labelText: "Rua",
                  prefixIcon: Icon(Icons.home_outlined),
                ),
                validator: (v) =>
                    v == null || v.isEmpty ? "Informe a rua" : null,
              ),
              SizedBox(height: 16),
              TextFormField(
                controller: _numberController,
                decoration: InputDecoration(
                  labelText: "Número",
                  prefixIcon: Icon(Icons.format_list_numbered),
                ),
                validator: (v) =>
                    v == null || v.isEmpty ? "Informe o número" : null,
              ),
              SizedBox(height: 16),
              TextFormField(
                controller: _neighborhoodController,
                decoration: InputDecoration(
                  labelText: "Bairro",
                  prefixIcon: Icon(Icons.location_city),
                ),
                validator: (v) =>
                    v == null || v.isEmpty ? "Informe o bairro" : null,
              ),
              SizedBox(height: 16),
              TextFormField(
                controller: _cityController,
                decoration: InputDecoration(
                  labelText: "Cidade",
                  prefixIcon: Icon(Icons.apartment),
                ),
                validator: (v) =>
                    v == null || v.isEmpty ? "Informe a cidade" : null,
              ),
              SizedBox(height: 16),
              TextFormField(
                controller: _zipController,
                decoration: InputDecoration(
                  labelText: "CEP",
                  prefixIcon: Icon(Icons.markunread_mailbox),
                ),
                validator: (v) =>
                    v == null || v.isEmpty ? "Informe o CEP" : null,
              ),
              SizedBox(height: 16),
              TextFormField(
                controller: _passwordController,
                obscureText: true,
                decoration: InputDecoration(
                  labelText: "Senha",
                  prefixIcon: Icon(Icons.lock),
                ),
                validator: (v) =>
                    v == null || v.length < 6 ? "Senha deve ter ao menos 6 caracteres" : null,
              ),
              SizedBox(height: 24),

              _loading
                  ? CircularProgressIndicator()
                  : Container(
                      width: double.infinity,
                      child: ElevatedButton(
                        onPressed: _register,
                        style: ElevatedButton.styleFrom(
                          padding: EdgeInsets.symmetric(vertical: 16),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(30),
                          ),
                          elevation: 5,
                          backgroundColor: AppColors.primary,
                        ),
                        child: Text("CRIAR CONTA",
                            style: AppTypography.button
                                .copyWith(color: Colors.white)),
                      ),
                    ),
            ],
          ),
        ),
      ),
    );
  }
}

